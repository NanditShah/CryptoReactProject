{"version":3,"sources":["Components/Chart.js","Components/InfoArea.js","App.js","index.js"],"names":["Chart","data","style","fontFamily","labels","map","entry","d","Date","getDate","getMonth","getFullYear","datasets","label","lineTension","backgroundColor","borderColor","borderWidth","fill","options","legend","display","scales","yAxes","gridLines","ticks","fontColor","xAxes","InfoArea","className","src","image","current_price","market_cap","market_cap_rank","price_change_percentage_24h_in_currency","App","useState","setData","cryptoData","setCryptoData","selectedCurrency","setSelectedCurrency","useEffect","fetchData","url1","url2","axios","get","then","response","prices","catch","err","console","log","large","market_data","usd","x","name","id","MenuItem","value","FormControl","variant","InputLabel","color","Select","onChange","e","target","displayEmpty","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed0edf24.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nfunction Chart({data}) {\r\n  return (\r\n    <div>\r\n      <Line\r\n      style={{fontFamily:\"recursive\"}}\r\n        data={{\r\n          labels: data.map((entry) => {\r\n            var d = new Date(entry[0]);\r\n            return d.getDate() + \"-\" + d.getMonth() + \"-\" + d.getFullYear();\r\n          }),\r\n\r\n          datasets: [\r\n            {\r\n              data: data.map((entry) => entry[1]),\r\n              label: \"Prices\",\r\n              lineTension: 2,\r\n              backgroundColor: '#801336',\r\n              borderColor: \"red\",\r\n              borderWidth: 2,\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n            legend:{\r\n              display:false,\r\n            },\r\n            scales: {\r\n            yAxes: [{\r\n                gridLines: {\r\n                    display: true,\r\n                },\r\n                ticks: {\r\n                  fontColor: \"white\",\r\n                  fontFamily:'recursive'\r\n                }\r\n            }],\r\n            xAxes: [{\r\n              \r\n                gridLines: {\r\n                    display: true,\r\n                    \r\n                },\r\n                ticks: {\r\n                  fontColor: \"white\",\r\n                  fontFamily:'recursive'\r\n                }\r\n            }]\r\n        }\r\n          }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react'\r\nimport './InfoArea.css'\r\n\r\nfunction InfoArea({data}) {\r\n    return (\r\n        <div className='card'>\r\n            <img className='image' src={data.image} />\r\n            \r\n\r\n            <div className='detail'>\r\n                <h4>Current Price  </h4>\r\n                <p>$  {data.current_price}</p>\r\n            </div>\r\n            <div className='detail'>\r\n                <h4>Market Cap  </h4>\r\n                <p>$  {data.market_cap}</p>\r\n            </div>\r\n            <div className='detail'>\r\n                <h4>Rank(Market Cap Vise)  </h4>\r\n\r\n                <p># {data.market_cap_rank}</p>\r\n            </div>\r\n            <div className='detail'>\r\n                <h4>Change in Price (Last 24hour)  </h4>\r\n                \r\n                <p>{data.price_change_percentage_24h_in_currency} %</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoArea\r\n","import { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Select from \"@material-ui/core/Select\";\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport axios from \"axios\";\nimport { MenuItem,FormControl,InputLabel } from \"@material-ui/core\";\nimport Chart from './Components/Chart'\nimport InfoArea from \"./Components/InfoArea\";\nimport {root} from '@material-ui/core/styles';\nfunction App() {\n\n  var [data, setData] = useState([]);\n  const [cryptoData, setCryptoData] = useState({});\n  var [selectedCurrency, setSelectedCurrency] = useState(\"bitcoin\");\n  var urlForchart = \"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=max&interval=daily\";\n  var urlForDailyData = \"https://api.coingecko.com/api/v3/coins/bitcoin\";\n  \n\n  useEffect(() => {\n    fetchData(urlForchart,urlForDailyData);\n  }, []);\n\n  const fetchData = (url1,url2) => {\n    axios\n      .get(url1)\n      .then(function (response) {\n        // console.log(response.data.prices);\n        setData(response.data.prices);\n        // console.log(data);\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n      axios\n      .get(url2)\n      .then(function (response) {\n        console.log(response.data.image.large);\n        // console.log(response.data.market_data.current_price.usd);\n        // console.log(response.data.market_data.market_cap.usd);\n        // console.log(response.data.market_data.market_cap_rank);\n        // console.log(response.data.market_data.price_change_percentage_24h_in_currency.usd);\n        setCryptoData({\n          image:response.data.image.large,\n          current_price:response.data.market_data.current_price.usd,\n          market_cap:response.data.market_data.market_cap.usd,\n          market_cap_rank:response.data.market_data.market_cap_rank,\n          price_change_percentage_24h_in_currency:response.data.market_data.price_change_percentage_24h_in_currency.usd\n        })\n      })\n      .catch(function (err) {\n        console.log(err);\n      });\n  };\n\n  const handleChange = (e) => {\n    var url1 = \"https://api.coingecko.com/api/v3/coins/\"+e.target.value+\"/market_chart?vs_currency=usd&days=max&interval=daily\"\n    var url2 = \"https://api.coingecko.com/api/v3/coins/\"+e.target.value\n    fetchData(url1,url2)\n    // console.log(url1);\n    setSelectedCurrency(e.target.value)\n  }\n\n\n\n   var currency = [\n    { name: \"BitCoin\", id: \"bitcoin\" },\n    { name: \"Ethereum (ETH)\", id: \"ethereum\" },\n    { name: \"Litecoin (LTC)\", id: \"litecoin\" },\n    { name: \"Cardano (ADA)\", id: \"cardano\" },\n    { name: \"Polkadot (DOT)\", id: \"polkadot\" },\n    { name: \"Stellar (XLM)\", id: \"stellar\" },\n    { name: \"Chainlink\", id: \"chainlink\" },\n    { name: \"Binance Coin (BNB)\", id: \"binancecoin\" },\n    { name: \"Tether (USDT)\", id: \"tether\" },\n    { name: \"Monero (XMR)\", id: \"monero\" },\n  ];\n  var x = currency.map((data) => (\n    \n    <MenuItem style={{fontFamily:\"Recursive\"}} id={data.id} value={data.id}>{data.name}</MenuItem>\n  ));\n\n  return (\n    <div className=\"App\">\n    <FormControl   variant='outlined'>\n    <InputLabel style={{color:'white'}}>Currency</InputLabel>\n    <Select  onChange={handleChange} displayEmpty value={selectedCurrency}  label='Currency' style={{backgroundColor:\"#801336\",color:'white',fontFamily:\"Recursive\"}}>\n\n      {x}\n    </Select>\n    </FormControl>\n    <InfoArea data={cryptoData} />\n    <Chart data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}